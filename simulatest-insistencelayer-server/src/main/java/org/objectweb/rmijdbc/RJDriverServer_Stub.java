// Stub class generated by rmic - DO NOT EDIT!

package org.objectweb.rmijdbc;

public final class RJDriverServer_Stub
    extends java.rmi.server.RemoteStub
    implements org.objectweb.rmijdbc.RJDriverInterface, java.rmi.server.Unreferenced
{
    private static final long serialVersionUID = 2L;
    
    private static final long interfaceHash = 137660496L;
    
    private static boolean useNewInvoke;
    
    @SuppressWarnings("deprecation")
	private static final java.rmi.server.Operation[] operations = {
        new java.rmi.server.Operation("boolean acceptsURL(java.lang.String)"),
        new java.rmi.server.Operation("org.objectweb.rmijdbc.RJConnectionInterface connect(java.lang.String, java.util.Properties)"),
        new java.rmi.server.Operation("int getMajorVersion()"),
        new java.rmi.server.Operation("int getMinorVersion()"),
        new java.rmi.server.Operation("org.objectweb.rmijdbc.RJDriverPropertyInfo[] getPropertyInfo(java.lang.String, java.util.Properties)"),
        new java.rmi.server.Operation("boolean jdbcCompliant()"),
        new java.rmi.server.Operation("void shutdown(java.lang.String)"),
        new java.rmi.server.Operation("void unreferenced()")
    };
    
    private static java.lang.reflect.Method $method_acceptsURL_0;
    private static java.lang.reflect.Method $method_connect_1;
    private static java.lang.reflect.Method $method_getMajorVersion_2;
    private static java.lang.reflect.Method $method_getMinorVersion_3;
    private static java.lang.reflect.Method $method_getPropertyInfo_4;
    private static java.lang.reflect.Method $method_jdbcCompliant_5;
    private static java.lang.reflect.Method $method_shutdown_6;
    private static java.lang.reflect.Method $method_unreferenced_7;
    
    static {
        try {
            java.rmi.server.RemoteRef.class.getMethod("invoke", new java.lang.Class[] { java.rmi.Remote.class, java.lang.reflect.Method.class, java.lang.Object[].class, long.class });
            useNewInvoke = true;
            $method_acceptsURL_0 = org.objectweb.rmijdbc.RJDriverServer.class.getMethod("acceptsURL", new java.lang.Class[] {java.lang.String.class});
            $method_connect_1 = org.objectweb.rmijdbc.RJDriverServer.class.getMethod("connect", new java.lang.Class[] {java.lang.String.class, java.util.Properties.class});
            $method_getMajorVersion_2 = org.objectweb.rmijdbc.RJDriverServer.class.getMethod("getMajorVersion", new java.lang.Class[] {});
            $method_getMinorVersion_3 = org.objectweb.rmijdbc.RJDriverServer.class.getMethod("getMinorVersion", new java.lang.Class[] {});
            $method_getPropertyInfo_4 = org.objectweb.rmijdbc.RJDriverServer.class.getMethod("getPropertyInfo", new java.lang.Class[] {java.lang.String.class, java.util.Properties.class});
            $method_jdbcCompliant_5 = org.objectweb.rmijdbc.RJDriverServer.class.getMethod("jdbcCompliant", new java.lang.Class[] {});
            $method_shutdown_6 = org.objectweb.rmijdbc.RJDriverServer.class.getMethod("shutdown", new java.lang.Class[] {java.lang.String.class});
            $method_unreferenced_7 = org.objectweb.rmijdbc.RJDriverServer.class.getMethod("unreferenced", new java.lang.Class[] {});
            
        }
        catch (java.lang.NoSuchMethodException e) {
            useNewInvoke = false;
        }
    }
    
    public RJDriverServer_Stub() {
        super();
    }
    public RJDriverServer_Stub(java.rmi.server.RemoteRef ref) {
        super(ref);
    }
    
    @SuppressWarnings("deprecation")
	public boolean acceptsURL(java.lang.String $param_0) throws java.rmi.RemoteException, java.sql.SQLException {
        try {
            if (useNewInvoke) {
                java.lang.Object $result = ref.invoke(this, $method_acceptsURL_0, new java.lang.Object[] {$param_0}, -7367999113689691797L);
                return (((java.lang.Boolean)$result).booleanValue());
            }
            else {
                java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject)this, operations, 0, interfaceHash);
                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                    out.writeObject($param_0);
                }
                catch (java.io.IOException e) {
                    throw new java.rmi.MarshalException("error marshalling arguments", e);
                }
                ref.invoke(call);
                boolean $result;
                try {
                    java.io.ObjectInput in = call.getInputStream();
                    $result = in.readBoolean();
                    return ($result);
                }
                catch (java.io.IOException e) {
                    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
                }
                finally {
                    ref.done(call);
                }
            }
        }
        catch (java.rmi.RemoteException e) {
            throw e;
        }
        catch (java.sql.SQLException e) {
            throw e;
        }
        catch (java.lang.Exception e) {
            throw new java.rmi.UnexpectedException("undeclared checked exception", e);
        }
    }
    
    @SuppressWarnings("deprecation")
    public org.objectweb.rmijdbc.RJConnectionInterface connect(java.lang.String $param_0, java.util.Properties $param_1) throws java.rmi.RemoteException, java.sql.SQLException {
        try {
            if (useNewInvoke) {
                java.lang.Object $result = ref.invoke(this, $method_connect_1, new java.lang.Object[] {$param_0, $param_1}, 5165148856741468322L);
                return ((org.objectweb.rmijdbc.RJConnectionInterface)$result);
            }
            else {
                java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject)this, operations, 1, interfaceHash);
                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                    out.writeObject($param_0);
                    out.writeObject($param_1);
                }
                catch (java.io.IOException e) {
                    throw new java.rmi.MarshalException("error marshalling arguments", e);
                }
                ref.invoke(call);
                org.objectweb.rmijdbc.RJConnectionInterface $result;
                try {
                    java.io.ObjectInput in = call.getInputStream();
                    $result = (org.objectweb.rmijdbc.RJConnectionInterface)in.readObject();
                    return ($result);
                }
                catch (java.io.IOException e) {
                    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
                }
                finally {
                    ref.done(call);
                }
            }
        }
        catch (java.rmi.RemoteException e) {
            throw e;
        }
        catch (java.sql.SQLException e) {
            throw e;
        }
        catch (java.lang.Exception e) {
            throw new java.rmi.UnexpectedException("undeclared checked exception", e);
        }
    }
    
    @SuppressWarnings("deprecation")
    public int getMajorVersion() throws java.rmi.RemoteException, java.sql.SQLException {
        try {
            if (useNewInvoke) {
                java.lang.Object $result = ref.invoke(this, $method_getMajorVersion_2, null, 8249261225631588463L);
                return (((java.lang.Integer)$result).intValue());
            }
            else {
                java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject)this, operations, 2, interfaceHash);
                try {
                    call.getOutputStream();
                }
                catch (java.io.IOException e) {
                    throw new java.rmi.MarshalException("error marshalling arguments", e);
                }
                ref.invoke(call);
                int $result;
                try {
                    java.io.ObjectInput in = call.getInputStream();
                    $result = in.readInt();
                    return ($result);
                }
                catch (java.io.IOException e) {
                    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
                }
                finally {
                    ref.done(call);
                }
            }
        }
        catch (java.rmi.RemoteException e) {
            throw e;
        }
        catch (java.sql.SQLException e) {
            throw e;
        }
        catch (java.lang.Exception e) {
            throw new java.rmi.UnexpectedException("undeclared checked exception", e);
        }
    }
    
    @SuppressWarnings("deprecation")
    public int getMinorVersion() throws java.rmi.RemoteException, java.sql.SQLException {
        try {
            if (useNewInvoke) {
                java.lang.Object $result = ref.invoke(this, $method_getMinorVersion_3, null, -7238054984232844689L);
                return (((java.lang.Integer)$result).intValue());
            }
            else {
                java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject)this, operations, 3, interfaceHash);
                try {
                    call.getOutputStream();
                }
                catch (java.io.IOException e) {
                    throw new java.rmi.MarshalException("error marshalling arguments", e);
                }
                ref.invoke(call);
                int $result;
                try {
                    java.io.ObjectInput in = call.getInputStream();
                    $result = in.readInt();
                    return ($result);
                }
                catch (java.io.IOException e) {
                    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
                }
                finally {
                    ref.done(call);
                }
            }
        }
        catch (java.rmi.RemoteException e) {
            throw e;
        }
        catch (java.sql.SQLException e) {
            throw e;
        }
        catch (java.lang.Exception e) {
            throw new java.rmi.UnexpectedException("undeclared checked exception", e);
        }
    }
    
    @SuppressWarnings("deprecation")
    public org.objectweb.rmijdbc.RJDriverPropertyInfo[] getPropertyInfo(java.lang.String $param_0, java.util.Properties $param_1) throws java.rmi.RemoteException, java.sql.SQLException {
        try {
            if (useNewInvoke) {
                java.lang.Object $result = ref.invoke(this, $method_getPropertyInfo_4, new java.lang.Object[] {$param_0, $param_1}, 2012679364492466773L);
                return ((org.objectweb.rmijdbc.RJDriverPropertyInfo[])$result);
            }
            else {
                java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject)this, operations, 4, interfaceHash);
                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                    out.writeObject($param_0);
                    out.writeObject($param_1);
                }
                catch (java.io.IOException e) {
                    throw new java.rmi.MarshalException("error marshalling arguments", e);
                }
                ref.invoke(call);
                org.objectweb.rmijdbc.RJDriverPropertyInfo[] $result;
                try {
                    java.io.ObjectInput in = call.getInputStream();
                    $result = (org.objectweb.rmijdbc.RJDriverPropertyInfo[])in.readObject();
                    return ($result);
                }
                catch (java.io.IOException e) {
                    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
                }
                finally {
                    ref.done(call);
                }
            }
        }
        catch (java.rmi.RemoteException e) {
            throw e;
        }
        catch (java.sql.SQLException e) {
            throw e;
        }
        catch (java.lang.Exception e) {
            throw new java.rmi.UnexpectedException("undeclared checked exception", e);
        }
    }
    
    @SuppressWarnings("deprecation")
    public boolean jdbcCompliant() {
        try {
            if (useNewInvoke) {
                java.lang.Object $result = ref.invoke(this, $method_jdbcCompliant_5, null, 160278965718780387L);
                return (((java.lang.Boolean)$result).booleanValue());
            }
            else {
                java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject)this, operations, 5, interfaceHash);
                try {
                    call.getOutputStream();
                }
                catch (java.io.IOException e) {
                    throw new java.rmi.MarshalException("error marshalling arguments", e);
                }
                ref.invoke(call);
                boolean $result;
                try {
                    java.io.ObjectInput in = call.getInputStream();
                    $result = in.readBoolean();
                    return ($result);
                }
                catch (java.io.IOException e) {
                    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
                }
                finally {
                    ref.done(call);
                }
            }
        }
        catch (java.lang.Exception e) {
            throw new RuntimeException("undeclared checked exception", e);
        }
    }
    
    @SuppressWarnings("deprecation")
    public void shutdown(java.lang.String $param_0) throws java.rmi.RemoteException {
        try {
            if (useNewInvoke) {
                ref.invoke(this, $method_shutdown_6, new java.lang.Object[] {$param_0}, -5716185735791416779L);
            }
            else {
                java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject)this, operations, 6, interfaceHash);
                try {
                    java.io.ObjectOutput out = call.getOutputStream();
                    out.writeObject($param_0);
                }
                catch (java.io.IOException e) {
                    throw new java.rmi.MarshalException("error marshalling arguments", e);
                }
                ref.invoke(call);
                try {
                    call.getInputStream();
                }
                catch (java.io.IOException e) {
                    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
                }
                finally {
                    ref.done(call);
                }
            }
        }
        catch (java.rmi.RemoteException e) {
            throw e;
        }
        catch (java.lang.Exception e) {
            throw new java.rmi.UnexpectedException("undeclared checked exception", e);
        }
    }
    
    @SuppressWarnings("deprecation")
    public void unreferenced()  {
        try {
            if (useNewInvoke) {
                ref.invoke(this, $method_unreferenced_7, null, -430969274754208937L);
            }
            else {
                java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject)this, operations, 7, interfaceHash);
                try {
                    call.getOutputStream();
                }
                catch (java.io.IOException e) {
                    throw new java.rmi.MarshalException("error marshalling arguments", e);
                }
                ref.invoke(call);
                try {
                    call.getInputStream();
                }
                catch (java.io.IOException e) {
                    throw new java.rmi.UnmarshalException("error unmarshalling return", e);
                }
                finally {
                    ref.done(call);
                }
            }
        }
        catch (java.lang.Exception e) {
            throw new RuntimeException("undeclared checked exception", e);
        }
    }
    
}
